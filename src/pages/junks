import React, { useEffect, useState, useCallback, useRef } from 'react'
import { CiSearch } from "react-icons/ci";
import { useNavigate } from 'react-router-dom';
import { collection, getDocs, doc, onSnapshot, updateDoc, arrayUnion, arrayRemove, query, where, serverTimestamp } from 'firebase/firestore';
import { auth, db } from '../firebase'; // Adjust the path as necessary
import useSound from 'use-sound';
import newMessageSound from '../assets/notificationsound.m4a'; // Ensure this path is correct

const messagepage = () => {
  const navigate = useNavigate();
  const [users, setUsers] = useState(() => {
    // Retrieve users from local storage on initial load
    const savedUsers = localStorage.getItem('cachedUsers');
    return savedUsers ? JSON.parse(savedUsers) : [];
  });
  const [refreshKey, setRefreshKey] = useState(0);
  const [blockedUsers, setBlockedUsers] = useState(() => {
    // Retrieve blocked users from local storage on initial load
    const savedBlockedUsers = localStorage.getItem('blockedUsers');
    return savedBlockedUsers ? JSON.parse(savedBlockedUsers) : [];
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [userAvatars, setUserAvatars] = useState(() => {
    const savedAvatars = localStorage.getItem('cachedUserAvatars');
    return savedAvatars ? JSON.parse(savedAvatars) : {};
  });
  const [unreadMessages, setUnreadMessages] = useState({});
  const [playNewMessageSound] = useSound(newMessageSound);
  const lastReadTimestampRef = useRef({});

  // Fetch users from Firestore, excluding the current user
  const fetchUsers = useCallback(async () => {
    if (!navigator.onLine) {
      console.log("Offline: Using cached user data");
      return;
    }

    try {
      const currentUser = auth.currentUser;
      if (currentUser) {
        const querySnapshot = await getDocs(collection(db, 'users'));
        const usersList = querySnapshot.docs
          .filter(doc => doc.id !== currentUser.uid)
          .map(doc => {
            const userData = doc.data();
            return {
              id: doc.id,
              ...userData,
              isOnline: userData.isOnline || false
            };
          });
        setUsers(usersList);
        localStorage.setItem('cachedUsers', JSON.stringify(usersList));
        setRefreshKey(prevKey => prevKey + 1);
      }
    } catch (error) {
      console.error("Error fetching users: ", error);
    }
  }, []);

  const handleBlockUser = (userToBlock) => {
    const updatedBlockedUsers = [...blockedUsers, userToBlock.id];
    setBlockedUsers(updatedBlockedUsers);
    localStorage.setItem('blockedUsers', JSON.stringify(updatedBlockedUsers));
    console.log(`User ${userToBlock.username} has been blocked.`);
  };

  const handleUnblockUser = (userToUnblock) => {
    const updatedBlockedUsers = blockedUsers.filter(id => id !== userToUnblock.id);
    setBlockedUsers(updatedBlockedUsers);
    localStorage.setItem('blockedUsers', JSON.stringify(updatedBlockedUsers));
    console.log(`User ${userToUnblock.username} has been unblocked.`);
  };

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
  };

  const filteredUsers = users.filter(user => 
    user.username && user.username.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const fetchAndCacheUserAvatar = useCallback(async (userId, photoURL) => {
    if (!navigator.onLine) return;

    try {
      const response = await fetch(photoURL);
      const blob = await response.blob();
      const reader = new FileReader();
      reader.onloadend = () => {
        setUserAvatars(prev => {
          const updated = { ...prev, [userId]: reader.result };
          localStorage.setItem('cachedUserAvatars', JSON.stringify(updated));
          return updated;
        });
      };
      reader.readAsDataURL(blob);
    } catch (error) {
      console.error("Error fetching user avatar:", error);
    }
  }, []);

  const clearUnreadMessages = (userId) => {
    setUnreadMessages(prev => {
      const newUnreadMessages = {...prev};
      delete newUnreadMessages[userId];
      return newUnreadMessages;
    });
    lastReadTimestampRef.current[userId] = Date.now();
  };

  useEffect(() => {
    fetchUsers(); // Initial fetch

    const handleOnline = () => {
      setIsOnline(true);
      fetchUsers();
    };

    const handleOffline = () => {
      setIsOnline(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Set up real-time listeners for each user's online status
    const unsubscribes = users.map(user => 
      onSnapshot(doc(db, 'users', user.id), 
        (docSnapshot) => {
          if (!navigator.onLine) return; // Don't update if offline
          const userData = docSnapshot.data();
          if (userData) {
            setUsers(prevUsers => {
              const updatedUsers = prevUsers.map(u => 
                u.id === user.id ? { ...u, ...userData, isOnline: userData.isOnline || false } : u
              );
              localStorage.setItem('cachedUsers', JSON.stringify(updatedUsers));
              return updatedUsers;
            });
          } else {
            setUsers(prevUsers => {
              const updatedUsers = prevUsers.filter(u => u.id !== user.id);
              localStorage.setItem('cachedUsers', JSON.stringify(updatedUsers));
              return updatedUsers;
            });
          }
        },
        (error) => {
          console.error(`Error listening to user ${user.id}:`, error);
        }
      )
    );

    // Set up interval for periodic refresh when online
    const intervalId = setInterval(() => {
      if (navigator.onLine) {
        fetchUsers();
      }
    }, 20000); // Refresh every 20 seconds

    // Fetch and cache avatars for all users
    users.forEach(user => {
      if (user.photoURL && !userAvatars[user.id]) {
        fetchAndCacheUserAvatar(user.id, user.photoURL);
      }
    });

    // Set up real-time listener for new messages
    const currentUser = auth.currentUser;
    if (currentUser) {
      const unsubscribeMessages = onSnapshot(
        collection(db, 'messages'),
        (snapshot) => {
          const newUnreadMessages = { ...unreadMessages };
          let newMessageReceived = false;

          snapshot.docChanges().forEach((change) => {
            if (change.type === 'added') {
              const newMessage = change.doc.data();
              if (newMessage.recipientId === currentUser.uid) {
                const senderId = newMessage.userId;
                const messageTimestamp = newMessage.createdAt?.toMillis() || Date.now();
                const currentTime = Date.now();
                
                // Only count messages from the last 10 seconds
                if (currentTime - messageTimestamp <= 10000) {
                  if (!lastReadTimestampRef.current[senderId]) {
                    lastReadTimestampRef.current[senderId] = 0;
                  }

                  if (messageTimestamp > lastReadTimestampRef.current[senderId]) {
                    if (!newUnreadMessages[senderId]) {
                      newUnreadMessages[senderId] = 0;
                    }
                    newUnreadMessages[senderId]++;
                    newMessageReceived = true;
                  }
                }
              }
            }
          });

          if (newMessageReceived) {
            playNewMessageSound();
            setUnreadMessages(newUnreadMessages);
          }
        }
      );

      return () => {
        // Clean up interval and listeners on component unmount
        clearInterval(intervalId);
        unsubscribes.forEach(unsubscribe => unsubscribe());
        window.removeEventListener('online', handleOnline);
        window.removeEventListener('offline', handleOffline);
        unsubscribeMessages();
      };
    }
  }, [fetchUsers, users, fetchAndCacheUserAvatar, playNewMessageSound]);

  return (
    <div className='bg-black pb-[2rem]'>
      {/* Search bar and button */}
      <div className='flex justify-center gap-[2.5rem] IPad:gap-[2rem] side-phone:gap-2 side-phone:flex-col'>
        <div className='text-white flex justify-center items-center relative py-[5.7rem] side-phone:pt-[7rem] side-phone:pb-[1rem] IPad:pl-[4rem] side-phone:py-[11rem] side-phone:pl-[0]'>
          <input 
            type="text" 
            placeholder='Search Friends' 
            className='bg-[#4B0082] pl-[3.6rem] w-[30rem] h-[3rem] rounded-[1rem] IPad:w-[20rem] side-phone:w-[14rem]' 
            value={searchQuery}
            onChange={handleSearchChange}
          />
          <CiSearch className='text-[#9E9EA2] absolute mr-[26rem] IPad:mr-[16rem] text-[1.5rem] side-phone:mr-[10.5rem]' />
        </div>
        <div className='flex justify-center items-center side-phone:pb-[5rem]'>
          <button 
            className='text-white bg-[#8A2BE2] px-4 py-3.5 text-[0.9rem] rounded-[1rem] IPad:text-[0.7rem] side-phone:text-[0.6rem] transition duration-300 ease-in-out transform hover:scale-105'
            onClick={() => {
              if (filteredUsers.length === 0) {
                alert('Username does not exist');
              }
            }}
          >
            Search
          </button>
        </div>
      </div>

      {/* User list */}
      <div className='max-w-2xl mx-auto px-4'>
        <ul className='space-y-4'>
          {filteredUsers.length > 0 ? (
            filteredUsers.map((user) => (
              <li key={user.id} className='flex items-center justify-between bg-gray-800 p-4 rounded-lg'>
                <div className='flex items-center space-x-4'>
                  <div className='w-12 h-12 rounded-full bg-gray-600 flex items-center justify-center text-white text-xl font-bold overflow-hidden'>
                    {userAvatars[user.id] ? (
                      <img 
                        src={userAvatars[user.id]} 
                        alt={user.username} 
                        className="w-full h-full object-cover" 
                        onError={() => {
                          if (user.photoURL && navigator.onLine) {
                            fetchAndCacheUserAvatar(user.id, user.photoURL);
                          }
                        }}
                      />
                    ) : user.photoURL ? (
                      <img 
                        src={`${user.photoURL}?${refreshKey}`} 
                        alt={user.username} 
                        className="w-full h-full object-cover" 
                        onError={() => {
                          if (navigator.onLine) {
                            fetchAndCacheUserAvatar(user.id, user.photoURL);
                          }
                        }}
                      />
                    ) : (
                      user.username ? user.username.charAt(0).toUpperCase() : '?'
                    )}
                  </div>
                  <span className='text-white truncate max-w-[8ch]' title={user.username}>
                    {user.username ? (user.username.length > 8 ? `${user.username.slice(0, 8)}...` : user.username) : 'Unknown'}
                  </span>
                </div>
                <div className='space-x-2'>
                  <button 
                    className={`bg-[#8A2BE2] text-white px-4 py-2 side-phone:px-2 side-phone:py-1 side-phone:text-[0.8rem] rounded-md hover:bg-opacity-80 transition duration-300 ${blockedUsers.includes(user.id) ? 'opacity-50 cursor-not-allowed' : ''} relative`}
                    onClick={() => {
                      navigate(`/chat/${user.id}`);
                      clearUnreadMessages(user.id);
                    }}
                    disabled={blockedUsers.includes(user.id)}
                  >
                    Chat
                    {unreadMessages[user.id] > 0 && (
                      <span className="absolute -top-2 -right-2 bg-red-600 rounded-full w-3 h-3"></span>
                    )}
                  </button>
                  {blockedUsers.includes(user.id) ? (
                    <button 
                      className='bg-green-600 text-white px-4 py-2 side-phone:px-2 side-phone:py-1 side-phone:text-[0.8rem] rounded-md hover:bg-opacity-80 transition duration-300'
                      onClick={() => handleUnblockUser(user)}
                    >
                      Unblock
                    </button>
                  ) : (
                    <button 
                      className='bg-red-600 text-white px-4 py-2 side-phone:px-2 side-phone:py-1 side-phone:text-[0.8rem] rounded-md hover:bg-opacity-80 transition duration-300'
                      onClick={() => handleBlockUser(user)}
                    >
                      Block
                    </button>
                  )}
                </div>
              </li>
            ))
          ) : (
            <li className='text-white text-center'>No users found</li>
          )}
        </ul>
      </div>
    </div>
  );
}

export default messagepage